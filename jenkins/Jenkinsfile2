pipeline {
    agent {
        docker {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }

    stages {
        stage('VerificaciÃ³n SCM') {
            steps {
                checkout scm
                sh "git rev-parse --short HEAD > .git/commit-id"
                def gitcommit = readFile('.git/commit-id').trim()
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
        stage('Analisis Sonarqube') {
            steps {
                def sonarqubeScannerHome = tool name: 'sonar', type: 'sonar-scanner'
                withCredentials([string(credentialsId: 'sonar', variable: 'sonarLogin')]) {
                    sh "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=${sonarLogin} -Dsonar.projectName=TestSonar -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.sources=src/ -Dsonar.tests=test/"
                }
            }
        }
    }
}
